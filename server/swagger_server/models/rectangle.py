# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Rectangle(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, top_left_x: int=None, top_left_y: int=None, bottom_right_x: int=None, bottom_right_y: int=None):  # noqa: E501
        """Rectangle - a model defined in Swagger

        :param name: The name of this Rectangle.  # noqa: E501
        :type name: str
        :param top_left_x: The top_left_x of this Rectangle.  # noqa: E501
        :type top_left_x: int
        :param top_left_y: The top_left_y of this Rectangle.  # noqa: E501
        :type top_left_y: int
        :param bottom_right_x: The bottom_right_x of this Rectangle.  # noqa: E501
        :type bottom_right_x: int
        :param bottom_right_y: The bottom_right_y of this Rectangle.  # noqa: E501
        :type bottom_right_y: int
        """
        self.swagger_types = {
            'name': str,
            'top_left_x': int,
            'top_left_y': int,
            'bottom_right_x': int,
            'bottom_right_y': int
        }

        self.attribute_map = {
            'name': 'name',
            'top_left_x': 'topLeftX',
            'top_left_y': 'topLeftY',
            'bottom_right_x': 'bottomRightX',
            'bottom_right_y': 'bottomRightY'
        }
        self._name = name
        self._top_left_x = top_left_x
        self._top_left_y = top_left_y
        self._bottom_right_x = bottom_right_x
        self._bottom_right_y = bottom_right_y

    @classmethod
    def from_dict(cls, dikt) -> 'Rectangle':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Rectangle of this Rectangle.  # noqa: E501
        :rtype: Rectangle
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Rectangle.


        :return: The name of this Rectangle.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Rectangle.


        :param name: The name of this Rectangle.
        :type name: str
        """

        self._name = name

    @property
    def top_left_x(self) -> int:
        """Gets the top_left_x of this Rectangle.


        :return: The top_left_x of this Rectangle.
        :rtype: int
        """
        return self._top_left_x

    @top_left_x.setter
    def top_left_x(self, top_left_x: int):
        """Sets the top_left_x of this Rectangle.


        :param top_left_x: The top_left_x of this Rectangle.
        :type top_left_x: int
        """

        self._top_left_x = top_left_x

    @property
    def top_left_y(self) -> int:
        """Gets the top_left_y of this Rectangle.


        :return: The top_left_y of this Rectangle.
        :rtype: int
        """
        return self._top_left_y

    @top_left_y.setter
    def top_left_y(self, top_left_y: int):
        """Sets the top_left_y of this Rectangle.


        :param top_left_y: The top_left_y of this Rectangle.
        :type top_left_y: int
        """

        self._top_left_y = top_left_y

    @property
    def bottom_right_x(self) -> int:
        """Gets the bottom_right_x of this Rectangle.


        :return: The bottom_right_x of this Rectangle.
        :rtype: int
        """
        return self._bottom_right_x

    @bottom_right_x.setter
    def bottom_right_x(self, bottom_right_x: int):
        """Sets the bottom_right_x of this Rectangle.


        :param bottom_right_x: The bottom_right_x of this Rectangle.
        :type bottom_right_x: int
        """

        self._bottom_right_x = bottom_right_x

    @property
    def bottom_right_y(self) -> int:
        """Gets the bottom_right_y of this Rectangle.


        :return: The bottom_right_y of this Rectangle.
        :rtype: int
        """
        return self._bottom_right_y

    @bottom_right_y.setter
    def bottom_right_y(self, bottom_right_y: int):
        """Sets the bottom_right_y of this Rectangle.


        :param bottom_right_y: The bottom_right_y of this Rectangle.
        :type bottom_right_y: int
        """

        self._bottom_right_y = bottom_right_y
