# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class LearningStrategy(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, iteration: int=None, backbone: str=None):  # noqa: E501
        """LearningStrategy - a model defined in Swagger

        :param name: The name of this LearningStrategy.  # noqa: E501
        :type name: str
        :param iteration: The iteration of this LearningStrategy.  # noqa: E501
        :type iteration: int
        :param backbone: The backbone of this LearningStrategy.  # noqa: E501
        :type backbone: str
        """
        self.swagger_types = {
            'name': str,
            'iteration': int,
            'backbone': str
        }

        self.attribute_map = {
            'name': 'name',
            'iteration': 'iteration',
            'backbone': 'backbone'
        }
        self._name = name
        self._iteration = iteration
        self._backbone = backbone

    @classmethod
    def from_dict(cls, dikt) -> 'LearningStrategy':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LearningStrategy of this LearningStrategy.  # noqa: E501
        :rtype: LearningStrategy
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this LearningStrategy.


        :return: The name of this LearningStrategy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this LearningStrategy.


        :param name: The name of this LearningStrategy.
        :type name: str
        """

        self._name = name

    @property
    def iteration(self) -> int:
        """Gets the iteration of this LearningStrategy.


        :return: The iteration of this LearningStrategy.
        :rtype: int
        """
        return self._iteration

    @iteration.setter
    def iteration(self, iteration: int):
        """Sets the iteration of this LearningStrategy.


        :param iteration: The iteration of this LearningStrategy.
        :type iteration: int
        """

        self._iteration = iteration

    @property
    def backbone(self) -> str:
        """Gets the backbone of this LearningStrategy.


        :return: The backbone of this LearningStrategy.
        :rtype: str
        """
        return self._backbone

    @backbone.setter
    def backbone(self, backbone: str):
        """Sets the backbone of this LearningStrategy.


        :param backbone: The backbone of this LearningStrategy.
        :type backbone: str
        """

        self._backbone = backbone
